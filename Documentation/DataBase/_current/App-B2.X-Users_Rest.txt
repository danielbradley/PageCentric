

~sp_users~
DROP   PROCEDURE users_create_quietly;
delimiter //
CREATE PROCEDURE users_create_quietly
(
$Email                     CHAR(99),
$Password                  CHAR(99),
$Given_name                CHAR(50),
$Family_name               CHAR(50),
$Type                      CHAR(20),
$Send                      BOOL
)
BEGIN

DECLARE $USER   INT;
DECLARE $salt   TEXT;
DECLARE $uhash  TEXT;
DECLARE $phash  TEXT;

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

    IF ! Users_Exists( $Email ) THEN

        INSERT INTO users_uids (type) VALUES ( $Type );
        SET $USER  = LAST_INSERT_ID();
        SET $salt  = generate_salt();
        SET $uhash = Users_Compute_Hash( $salt, $Email    );
        SET $phash = Users_Compute_Hash( $salt, $Password );

        INSERT INTO users
            (  USER,  email, created,  user_salt, user_hash, password_hash, send_confirmation,   user_status,  given_name,  family_name )
        VALUES
            ( $USER, $Email,   NOW(),      $salt,    $uhash,        $phash,             $Send, "UNCONFIRMED", $Given_name, $Family_name );

    END IF;

END IF;

END
//
delimiter ;
~

~sp_users~
DROP   PROCEDURE Users_Activation_Sent;
DELIMITER //
CREATE PROCEDURE Users_Activation_Sent
(
  $Email              CHAR(99),
  $Password           CHAR(99)
)
BEGIN

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

	IF Users_Vefify_Credentials( $Email, $Password ) THEN

		UPDATE users SET sent=1 WHERE email=$Email;

	ELSE
	
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'INVALID_AUTHORISATION';

	END IF;

END IF;

END
//
DELIMITER ;
~


~sp_users~
DROP   PROCEDURE users_change_password_with_USER;
DELIMITER //
CREATE PROCEDURE users_change_password_with_USER
(
  $USER         INT(11),
  $OldPassword CHAR(99),
  $NewPassword CHAR(99)
)
BEGIN

DECLARE $email TEXT;

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

	SELECT email INTO $email FROM users WHERE USER=$USER;

	IF "" != $email THEN

	  CALL users_change_password( $email, $OldPassword, $NewPassword );

	END IF;

END IF;

END
//
DELIMITER ;
~

~sp_users~
DROP   PROCEDURE users_admin_reset_password;
DELIMITER //
CREATE PROCEDURE users_admin_reset_password
(
  $email        CHAR(99),
  $new_password CHAR(99)
)
BEGIN

DECLARE $ret   BOOL;
DECLARE $salt  TEXT;
DECLARE $uhash TEXT;
DECLARE $phash TEXT;

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

	IF Is_Local_Root_Caller() THEN

	  SET $ret = False;

	  SET $salt  = generate_salt();
	  SET $uhash = Users_Compute_Hash( $salt, $email        );
	  SET $phash = Users_Compute_Hash( $salt, $new_password );

	  UPDATE users
	  SET user_salt=$salt, user_hash=$uhash, password_hash=$phash
	  WHERE email=$email;

	  IF EXISTS( SELECT * FROM users WHERE user_salt=$salt AND user_hash=$uhash AND password_hash=$phash ) THEN
		SET $ret = True;
	  END IF;

	  SELECT $ret AS success;

	END IF;

END IF;

END
//
DELIMITER ;
~

~sp_users~
DROP   PROCEDURE users_reset_password;
DELIMITER //
CREATE PROCEDURE users_reset_password
(
  $Sid          CHAR(64),
  $USER          INT(11),
  $new_password CHAR(99)
)
BEGIN

DECLARE $email TEXT;
DECLARE $salt  TEXT;
DECLARE $uhash TEXT;
DECLARE $phash TEXT;

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

    CALL Users_Authorise_Sessionid( $Sid, @email, @USER, @idtype );

    IF "ADMIN" = @idtype THEN

        SELECT email INTO $email FROM users WHERE USER=$USER;

        SET $salt  = generate_salt();
        SET $uhash = Users_Compute_Hash( $salt, $email        );
        SET $phash = Users_Compute_Hash( $salt, $new_password );

        UPDATE users
        SET user_salt=$salt, user_hash=$uhash, password_hash=$phash
        WHERE USER=$USER;

    END IF;

END IF;

END
//
DELIMITER ;
~


~sp_users~
DROP FUNCTION   Users_Exists;
delimiter //
CREATE FUNCTION Users_Exists( $Email CHAR(99) )
RETURNS BOOLEAN
READS SQL DATA
BEGIN

DECLARE $exists BOOLEAN DEFAULT FALSE;

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

	return Exists( SELECT email FROM users WHERE email=$Email );

END IF;

return $exists;

END
//
delimiter ;
~

~sp_users~
DROP   PROCEDURE users_create_admin;
DELIMITER //
CREATE PROCEDURE users_create_admin
(
  $password                      CHAR(99)
)
BEGIN

DECLARE $sent_email INT DEFAULT 1;

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

    IF Is_Local_Root_Caller() THEN

        CALL users_create_quietly( 'admin', $password, 'Admin', 'Account', 'ADMIN', $sent_email );

    END IF;

END IF;

END
//
DELIMITER ;
~


~sp_users~
DROP   PROCEDURE Users_Resend_Activation;
delimiter //
CREATE PROCEDURE Users_Resend_Activation
(
$email                     CHAR(99)
)
BEGIN

DECLARE $USER INT;

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

	SELECT USER INTO $USER FROM users WHERE email=$email;

	IF EXISTS( SELECT * FROM users_activations WHERE USER=$USER ) THEN

		UPDATE users SET sent=0 WHERE email=$email;

	END IF;

END IF;

END
//
delimiter ;
~

~sp_users~
DROP   PROCEDURE Users_Retrieve_All;
delimiter //
CREATE PROCEDURE Users_Retrieve_All
(
$Sid                           CHAR(64)
)
BEGIN

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

    CALL Users_Authorise_Sessionid( $Sid, @email, @USER, @idtype );

    IF "ADMIN" = @idtype THEN

        SELECT * FROM view_users ORDER BY USER DESC;

    ELSE

        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'INVALID_AUTHORISATION';

    END IF;

END IF;

END
//
delimiter ;
~

~sp_users~
DROP   PROCEDURE Users_Retrieve_By_User_Hash;
DELIMITER //
CREATE PROCEDURE Users_Retrieve_By_User_Hash
(
  $sid                             CHAR(64),
  $user_hash                       CHAR(64)
)
BEGIN

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

	CALL Users_Authorise_Sessionid( $Sid, @email, @USER, @idtype );

	IF "" != @idtype THEN

		SELECT * FROM users WHERE user_hash=$user_hash;

	END IF;

END IF;

END
//
DELIMITER ;
~

~sp_users~
DROP   PROCEDURE Users_Retrieve_Unsent;
DELIMITER //
CREATE PROCEDURE Users_Retrieve_Unsent
()
BEGIN

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

	SELECT * FROM view_users WHERE sent=0;

END IF;

END
//
DELIMITER ;
~

~sp_users~
DROP   PROCEDURE Users_Retrieve_Unsent_With_Names;
DELIMITER //
CREATE PROCEDURE Users_Retrieve_Unsent_With_Names
()
BEGIN

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

	SELECT * FROM view_users WHERE sent=0 AND NOT given_name='' AND NOT family_name='';

END IF;

END
//
DELIMITER ;
~


~sp_users~
DROP   PROCEDURE Users_Update_Sent;
DELIMITER //
CREATE PROCEDURE Users_Update_Sent
(
  $Email              CHAR(99)
)
BEGIN

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

	UPDATE users SET sent=1, confirmation_sent=NOW() WHERE email=$Email OR email_provisional=$Email;

END IF;

END
//
DELIMITER ;
~


...         Table: users (session reliant)

....            Stored Procedures

.....				Users Retrieve Single

~sp_users~
DROP   PROCEDURE Users_Retrieve_Single;
delimiter //
CREATE PROCEDURE Users_Retrieve_Single
(
  $Sid                       CHAR(64),
  $USER                       INT(11)
)
BEGIN

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

	CALL Users_Authorise_Sessionid( $Sid, @email, @USER, @idtype );

	IF @USER = $USER THEN

	  SELECT * FROM users WHERE USER=$USER LIMIT 1;

	END IF;

END IF;

END
//
delimiter ;
~

.....				Users Update name

~sp_users~
DROP   PROCEDURE Users_Update_Name;
delimiter //
CREATE PROCEDURE Users_Update_Name
(
  $Sid                       CHAR(64),
  $USER                       INT(11),
  $given_name                CHAR(50),
  $family_name               CHAR(50)
)
BEGIN

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

	CALL Users_Authorise_Sessionid( $Sid, @email, @USER, @idtype );

	IF @USER = $USER THEN

	  UPDATE users SET given_name=$given_name, family_name=$family_name WHERE USER=$USER;

	END IF;

END IF;

END
//
delimiter ;
~

~sp_users~
DROP   PROCEDURE Users_Retrieve_Signups;
delimiter //
CREATE PROCEDURE Users_Retrieve_Signups
(
$days INT(11)
)
BEGIN

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

	SELECT email, sent, user_status, given_name, family_name, user_hash FROM users WHERE created > DATE_SUB( NOW(), INTERVAL $days DAY );

END IF;

END
//
delimiter ;
~



...			Table: requested invites

~tables~
DROP   TABLE users_requested_invites;
CREATE TABLE users_requested_invites
(
REQUEST                             INT(11)  AUTO_INCREMENT,
email                           VARCHAR(99)  NOT NULL DEFAULT '',
time_of_request                DATETIME,
invite_sent                     BOOLEAN,

PRIMARY KEY (REQUEST)
);
~

....			Stored Procedures

.....				Procedure: Users Requested Invites Replace

~sp_users~
DROP PROCEDURE   Users_Requested_Invites_Replace;
DELIMITER //
CREATE PROCEDURE Users_Requested_Invites_Replace
(
  $email                         CHAR(99)
)
BEGIN

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

	IF NOT EXISTS( SELECT * FROM users_requested_invites WHERE email=$email ) THEN
		REPLACE INTO users_requested_invites
			   (  REQUEST,  email, time_of_request, invite_sent )
		VALUES (        0, $email,           NOW(),           0 );
	END IF;

END IF;

END
//
DELIMITER ;
~

.....				Procedure: Users Requested Invites Retrieve

~sp_users~
DROP   PROCEDURE Users_Requested_Invites_Retrieve;
DELIMITER //
CREATE PROCEDURE Users_Requested_Invites_Retrieve
(
  $sid                           CHAR(64)
)
BEGIN

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

    CALL Users_Authorise_Sessionid( $Sid, @email, @USER, @idtype );

    IF "SID" = @idtype THEN
        IF NOT EXISTS( SELECT * FROM users_requested_invites WHERE email=@email ) THEN
            SELECT * FROM users_requested_invites ORDER BY time_of_request;
        END IF;
    END IF;

END IF;

END
//
DELIMITER ;
~


...         Table: users activations

~tables~
DROP   TABLE users_activations;
CREATE TABLE users_activations (

USER                                INT(11)  NOT NULL,
timestamp                     TIMESTAMP      NOT NULL,
token                           VARCHAR(64)  NOT NULL,

PRIMARY KEY (USER)
);
~

....                Stored Procedures

.....                   Users Activations Create

~sp_users~
DROP   PROCEDURE Users_Activations_Create;
DELIMITER //
CREATE PROCEDURE Users_Activations_Create
(
  $email                           CHAR(99)
)
BEGIN

DECLARE $USER  INT;
DECLARE $token TEXT;

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

	SET $token = generate_salt();

	SELECT USER INTO $USER FROM users WHERE email=$email OR email_provisional=$email;

	IF "" != $USER THEN
	  REPLACE INTO users_activations VALUES ( $USER, NOW(), $token );
	END IF;

	SELECT $token AS token;

END IF;

END
//
DELIMITER ;
~

~sp_users~
DROP   PROCEDURE Users_Activations_Confirm_Account;
DELIMITER //
CREATE PROCEDURE Users_Activations_Confirm_Account
(
  $token                           CHAR(64)
)
BEGIN

DECLARE $USER              INT;
DECLARE $email             TEXT;
DECLARE $email_provisional TEXT;

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

	SELECT USER INTO $USER FROM users_activations WHERE token=$token;

	IF 0 != $USER THEN
	  SELECT email, email_provisional INTO $email, $email_provisional
	  FROM users WHERE USER=$USER;
		
	  IF "" != $email_provisional THEN
		SET $email = $email_provisional;
	  END IF;

	  UPDATE users SET email=$email, email_provisional='', user_status='CONFIRMED' WHERE USER=$USER;
	  DELETE FROM users_activations WHERE token=$token;
	END IF;

END IF;

END
//
DELIMITER ;
~

~sp_users~
DROP   PROCEDURE Users_Activations_Confirm_Account_And_Authenticate;
DELIMITER //
CREATE PROCEDURE Users_Activations_Confirm_Account_And_Authenticate
(
  $token                           CHAR(64)
)
BEGIN

DECLARE $USER              INT;
DECLARE $email             TEXT;
DECLARE $email_provisional TEXT;
DECLARE $sessionid         TEXT;

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

	SELECT USER INTO $USER FROM users_activations WHERE token=$token;

	SET $sessionid = "";

	IF 0 != $USER THEN
		SELECT email, email_provisional INTO $email, $email_provisional
		FROM users WHERE USER=$USER;
		
		IF "" != $email_provisional THEN
			SET $email = $email_provisional;
		END IF;

		UPDATE users SET email=$email, email_provisional='', user_status='CONFIRMED' WHERE USER=$USER;
		DELETE FROM users_activations WHERE token=$token;

		SET $sessionid = MD5( concat( $token, NOW() ) );
		REPLACE INTO users_sessions VALUES ( $sessionid, $email, NOW(), NOW(), UNIX_TIMESTAMP() + 1000 );
	END IF;

	SELECT $sessionid AS sessionid;

END IF;

END
//
DELIMITER ;
~




...			Table: users reset passwords

~tables~
DROP   TABLE users_send_resets;
CREATE TABLE users_send_resets
(
USER                                INT(11)  NOT NULL,
timestamp                     TIMESTAMP      NOT NULL,
token                           VARCHAR(64)  NOT NULL,
sent                          TIMESTAMP      NOT NULL,

PRIMARY KEY (USER)
);
~

....			Stored Procedures

.....				Users Reset Passwords

~sp_users~
DROP   PROCEDURE Users_Send_Resets_Replace;
DELIMITER //
CREATE PROCEDURE Users_Send_Resets_Replace
(
  $email      CHAR(99)
)
BEGIN

DECLARE $USER  INT;
DECLARE $token TEXT;

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

	SET $token = generate_salt();

	SELECT USER INTO $USER FROM users WHERE email=$email;

	IF "" != $USER THEN
	  REPLACE INTO users_send_resets VALUES ( $USER, NOW(), $token, 0 );
	END IF;

END IF;

END
//
DELIMITER ;
~

~sp_users~
DROP   PROCEDURE Users_Send_Resets_Retrieve;
DELIMITER //
CREATE PROCEDURE Users_Send_Resets_Retrieve
()
BEGIN

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

	SELECT * FROM users_send_resets LEFT JOIN users USING (USER) WHERE users_send_resets.sent=0;

END IF;

END
//
DELIMITER ;
~

~sp_users~
DROP   PROCEDURE Users_Send_Resets_Sent;
DELIMITER //
CREATE PROCEDURE Users_Send_Resets_Sent
(
  $email  CHAR(99)
)
BEGIN

DECLARE $USER INT;

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

	SELECT USER INTO $USER FROM users_send_resets LEFT JOIN users USING (USER) WHERE email=$email LIMIT 1;

	UPDATE users_send_resets SET sent=NOW() WHERE USER=$USER;

END IF;

END
//
DELIMITER ;
~


~sp_users~
DROP   PROCEDURE Users_Send_Resets_Reset_Password;
DELIMITER //
CREATE PROCEDURE Users_Send_Resets_Reset_Password
(
  $token                           CHAR(64),
  $password                        CHAR(99)
)
BEGIN

DECLARE $USER  INT;
DECLARE $email TEXT;
DECLARE $salt  TEXT;
DECLARE $uhash TEXT;
DECLARE $phash TEXT;

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

	SELECT USER INTO $USER FROM users_send_resets WHERE token=$token;

	IF 0 != $USER THEN
		SELECT email INTO $email FROM users WHERE USER=$USER;

		SET $salt  = generate_salt();
		SET $uhash = Users_Compute_Hash( $salt, $email );
		SET $phash = Users_Compute_Hash( $salt, $Password );

		UPDATE users
		SET user_salt=$salt, user_hash=$uhash, password_hash=$phash, invalid_logins=0
		WHERE USER=$USER;

		DELETE FROM users_send_resets WHERE token=$token;

		SELECT "OK" AS status, $email AS username;

	ELSE

		SELECT "ERROR" AS status, "INVALID_TOKEN" AS message;

	END IF;

END IF;

END
//
DELIMITER ;
~

~sp_users~
DROP   FUNCTION Users_Send_Resets_Exists;
DELIMITER //
CREATE FUNCTION Users_Send_Resets_Exists
(
  $token      CHAR(64)
)
RETURNS BOOL
READS SQL DATA
BEGIN

DECLARE $exists BOOLEAN DEFAULT FALSE;

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

	SET $exists = EXISTS( SELECT * FROM users_send_resets WHERE token=$token );

END IF;

return $exists;

END
//
DELIMITER ;
~









...         Table: alternate emails

~tables~
DROP   TABLE users_alternate_emails;
CREATE TABLE users_alternate_emails (

USER                            INT(11)  NOT NULL AUTO_INCREMENT,
email                       VARCHAR(99)  NOT NULL DEFAULT '',
token                       VARCHAR(64)  NOT NULL,

PRIMARY KEY (USER,email)
);
~

....            Stored Procedures

.....               Users Alternate Emails Create

~sp_users~
DROP   PROCEDURE Users_Alternate_Emails_Create;
delimiter //
CREATE PROCEDURE Users_Alternate_Emails_Create
(
  $Sid                       CHAR(64),
  $USER                       INT(11),
  $email                  VARCHAR(99)
)
BEGIN

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

	CALL Users_Authorise_Sessionid( $Sid, @email, @USER, @idtype );

	IF @USER = $USER THEN

	  REPLACE INTO users_alternate_emails VALUES ( $USER, $email, generate_salt() );

	END IF;

END IF;

END
//
delimiter ;
~


.....                   Users Alternate Emails Delete

~sp_users~
DROP   PROCEDURE Users_Alternate_Emails_Delete;
delimiter //
CREATE PROCEDURE Users_Alternate_Emails_Delete
(
  $Sid                       CHAR(64),
  $USER                       INT(11),
  $Email                  VARCHAR(99)
)
BEGIN

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

	CALL Users_Authorise_Sessionid( $Sid, @email, @USER, @idtype );

	IF @USER = $USER THEN
		DELETE FROM users_alternate_emails WHERE USER=$USER AND email=$Email;
	END IF;

END IF;

END
//
delimiter ;
~


.....                   Users

~sp_users~
DROP   PROCEDURE Users_Alternate_Emails_Retrieve_By_USER;
delimiter //
CREATE PROCEDURE Users_Alternate_Emails_Retrieve_By_USER
(
  $Sid                       CHAR(64),
  $USER                       INT(11)
)
BEGIN

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

	CALL Users_Authorise_Sessionid( $Sid, @email, @USER, @idtype );

	IF @USER = $USER THEN
		SELECT * FROM users_alternate_emails WHERE USER=$USER ORDER BY email;
	END IF;

END IF;

END
//
delimiter ;
~

...			Table: Users_Termination_Schedule

~tables~
DROP   TABLE users_termination_schedule;
CREATE TABLE users_termination_schedule
(

USER                            INT(11)  NOT NULL,
mark                       DATETIME      NOT NULL,
time_of_termination        DATETIME      NOT NULL,

PRIMARY KEY (USER)
);
~

....			Stored Procedures

o	Users_Termination_Schedule_Replace

~sp_users~
DROP   PROCEDURE Users_Termination_Schedule_Replace;
delimiter //
CREATE PROCEDURE Users_Termination_Schedule_Replace
(
  $Sid                        CHAR(64),
  $USER                        INT(11),
  $password                   CHAR(99)
)
BEGIN


IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

	SET @success = 0;

	CALL Users_Authorise_Sessionid( $Sid, @email, @USER, @idtype );

	IF @USER = $USER THEN
		IF ( users_verify_credentials( @email, $password ) ) THEN
			REPLACE INTO users_termination_schedule
				( USER,  mark,  time_of_termination )
			VALUES
				( $USER, NOW(), date_add( NOW(), INTERVAL 1 DAY ) );
			SET @success = 1;

		END IF;
	END IF;

	SELECT @success AS success;

END IF;

END
//
delimiter ;
~

~sp_users~
DROP   PROCEDURE Users_Termination_Schedule_Retrieve;
delimiter //
CREATE PROCEDURE Users_Termination_Schedule_Retrieve
()
BEGIN

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

	SELECT USER, time_of_termination, email
	FROM users_termination_schedule LEFT JOIN users USING (USER)
	WHERE NOW() > time_of_termination;

END IF;

END
//
delimiter ;
~


...			Table: users deleted

~tables~
DROP   TABLE users_deleted;
CREATE TABLE users_deleted
(
USER         INT(11),
DELETED_USER INT(11)
);
~

~sp_users~
DROP   PROCEDURE Users_Delete;
delimiter //
CREATE PROCEDURE Users_Delete
(
  $Sid  CHAR(64),
  $USER INT(11)
)
BEGIN

DECLARE $email TEXT;

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

	IF "" != $Sid THEN
        CALL Users_Authorise_Sessionid( $Sid, @email, @USER, @idtype );
        INSERT INTO users_deleted VALUES ( @USER, $USER );
	END IF;

	SELECT email INTO $email FROM users WHERE USER=$USER;

	DELETE FROM users_activations          WHERE USER=$USER;
	DELETE FROM users_alternate_emails     WHERE USER=$USER;
	DELETE FROM users_send_resets          WHERE USER=$USER;
	DELETE FROM users_sessions             WHERE email=$email;
	DELETE FROM users_uids                 WHERE USER=$USER;
	DELETE FROM users_termination_schedule WHERE USER=$USER;
	DELETE FROM users                      WHERE USER=$USER;

END IF;

END
//
delimiter ;
~





