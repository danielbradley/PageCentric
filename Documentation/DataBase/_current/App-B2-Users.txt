..		Module: Users

...			Encryption

~sp~
DROP   FUNCTION generate_salt;
delimiter //
CREATE FUNCTION generate_salt
()
RETURNS CHAR(64)
BEGIN

DECLARE salt CHAR(64);

SET salt = RAND();

SET salt = SHA2( salt, 256 );

return salt;

END
//
delimiter ;
~

~sp~
DROP   FUNCTION Users_Compute_Hash;
delimiter //
CREATE FUNCTION Users_Compute_Hash
(
  salt           CHAR(64),
  value          TEXT
)
RETURNS CHAR(64)
BEGIN

DECLARE enckey TEXT;
DECLARE string TEXT;
DECLARE hash   CHAR(64);

SET enckey = SHA2( HEX( DES_ENCRYPT( "PrivateKey" ) ), 256 );
SET string = CONCAT( enckey, salt, value );
SET hash   = SHA2( string, 256 );

return hash;

END
//
delimiter ;
~

~sp~
DROP   FUNCTION Old_Users_Compute_Hash;
delimiter //
CREATE FUNCTION Old_Users_Compute_Hash
(
  $salt                             INT(11),
  $value                           CHAR(99)
)
RETURNS CHAR(16)
DETERMINISTIC
BEGIN

return MD5( concat($value, $salt) );

END
//
delimiter ;
~


...		Access Control

~sp~
DROP   FUNCTION Is_Local_Caller;
delimiter //
CREATE FUNCTION Is_Local_Caller
()
RETURNS BOOL
DETERMINISTIC
BEGIN

DECLARE $USER TEXT;

SET $USER = USER();

return ('public@localhost' = $USER OR 'root@localhost' = $USER);

END
//
delimiter ;
~

...			Table: UIDS

~tables~
DROP   TABLE users_uids;
CREATE TABLE users_uids (

USER                            INT(11)  NOT NULL AUTO_INCREMENT,
type                        VARCHAR(20)  NOT NULL DEFAULT '',

PRIMARY KEY (USER)
);
~

....			Stored Procedures

.....				users uid create

~
DROP   FUNCTION users_uid_create;
delimiter //
CREATE FUNCTION users_uid_create( $Type VARCHAR(20) )
RETURNS INT(11)
BEGIN

INSERT INTO users_uids (type) VALUES ( $Type );
return LAST_INSERT_ID();

END
//
delimiter ;
~

~sp~
DROP   PROCEDURE users_uid_create;
delimiter //
CREATE PROCEDURE users_uid_create( $Type VARCHAR(20) )
BEGIN

INSERT INTO users_uids (type) VALUES ( $Type );
SELECT LAST_INSERT_ID() AS USER;

END
//
delimiter ;
~


...			Table: Users

~tables~
DROP   TABLE users;
CREATE TABLE users (

USER                            INT(11)  NOT NULL,
email                       VARCHAR(99)  NOT NULL,
email_provisional           VARCHAR(99)  NOT NULL DEFAULT '',
created                    DATETIME      NOT NULL,
last_login                 DATETIME      NOT NULL,
invalid_logins                  INT(11)  NOT NULL,

user_salt                   VARCHAR(64)  NOT NULL,
user_hash                   VARCHAR(64)  NOT NULL,
password_hash               VARCHAR(64)  NOT NULL,
user_status                 VARCHAR(20)  NOT NULL,
sent                           BOOL      NOT NULL,

given_name                  VARCHAR(50)  NOT NULL,
family_name                 VARCHAR(50)  NOT NULL,

PRIMARY KEY (email), UNIQUE KEY (USER)
);
~

~views~
DROP   VIEW view_users;
CREATE VIEW view_users AS
  SELECT * FROM users LEFT JOIN users_uids USING (USER);
~

....			Stored Procedures

o	Users_Activation_Sent
o	Users_Compute_Hash
o	Users_Change_Password
o	Users_Check_Password
o	Users_Create
o	Users_Exists
o	Users_Resent_Activation
o	Users_Retrieve
o	Users_Retrieve_By_User_Hash
o	Users_Retrieve_Unsent
o	Users_Update
o	Users_Update_Sent
o	Users_Verify_Credentials

~sp~
DROP   PROCEDURE Users_Activation_Sent;
DELIMITER //
CREATE PROCEDURE Users_Activation_Sent
(
  $Email              CHAR(99),
  $Password           CHAR(99)
)
BEGIN

IF Users_Vefify_Credentials( $Email, $Password ) THEN

    UPDATE users SET sent=1 WHERE email=$Email;

END IF;

END
//
DELIMITER ;
~

~sp~
DROP   PROCEDURE users_change_password;
DELIMITER //
CREATE PROCEDURE users_change_password
(
  $Email       CHAR(99),
  $OldPassword CHAR(99),
  $NewPassword CHAR(99)
)
BEGIN

DECLARE ret   BOOL;
DECLARE salt  TEXT;
DECLARE uhash TEXT;
DECLARE phash TEXT;

SET ret = False;

IF users_verify_credentials( $Email, $OldPassword ) THEN

    SET salt  = generate_salt();
    SET uhash = Users_Compute_Hash( salt, $Email    );
    SET phash = Users_Compute_Hash( salt, $NewPassword );

    UPDATE users
    SET user_salt=salt, user_hash=uhash, password_hash=phash
    WHERE email=$Email;

    SET ret = True;

END IF;

SELECT ret AS success;

END
//
DELIMITER ;
~

~sp~
DROP   PROCEDURE users_admin_reset_password;
DELIMITER //
CREATE PROCEDURE users_admin_reset_password
(
  $email        CHAR(99),
  $new_password CHAR(99)
)
BEGIN

DECLARE $ret   BOOL;
DECLARE $salt  TEXT;
DECLARE $uhash TEXT;
DECLARE $phash TEXT;

SET $ret = False;

SET $salt  = generate_salt();
SET $uhash = Users_Compute_Hash( $salt, $email        );
SET $phash = Users_Compute_Hash( $salt, $new_password );

UPDATE users
SET user_salt=$salt, user_hash=$uhash, password_hash=$phash
WHERE email=$email;

IF EXISTS( SELECT * FROM users WHERE user_salt=$salt AND user_hash=$uhash AND password_hash=$phash ) THEN
  SET $ret = True;
END IF;

SELECT $ret AS success;

END
//
DELIMITER ;
~

~sp~
DROP   FUNCTION Users_Check_Password;
DELIMITER //
CREATE FUNCTION Users_Check_Password
(
  $USER                             INT(11),
  $Password                        CHAR(99)
)
RETURNS BOOLEAN
READS SQL DATA
BEGIN

DECLARE $email CHAR(99);

SELECT email INTO $email FROM users WHERE USER=$USER;

return users_verify_credentials( $email, $Password );

END
//
DELIMITER ;
~

~sp~
DROP   PROCEDURE users_create;
delimiter //
CREATE PROCEDURE users_create
(
$Email                     CHAR(99),
$Password                  CHAR(99),
$Given_name                CHAR(50),
$Family_name               CHAR(50),
$Type                      CHAR(20)
)
BEGIN

DECLARE $USER   INT;
DECLARE $salt   TEXT;
DECLARE $uhash  TEXT;
DECLARE $phash  TEXT;
DECLARE $status TEXT;

IF ! Users_Exists( $Email ) THEN
  INSERT INTO users_uids (type) VALUES ( $Type );
  SET $USER  = LAST_INSERT_ID();
  SET $salt  = generate_salt();
  SET $uhash = Users_Compute_Hash( $salt, $Email    );
  SET $phash = Users_Compute_Hash( $salt, $Password );

  INSERT INTO users
    (  USER,  email, created, last_login, invalid_logins, user_salt, user_hash, password_hash, sent,   user_status,  given_name,  family_name )
  VALUES
    ( $USER, $Email,   NOW(),          0,              0,     $salt,    $uhash,        $phash,    0, "UNCONFIRMED", $Given_name, $Family_name );

  IF Users_Exists( $Email ) THEN
    SET $status = "OK";
  ELSE
    SET $status = "ERROR";
  END IF;

ELSE

SET $status = "USER_EXISTS";

END IF;

SELECT $USER AS USER, $status as status;

END
//
delimiter ;
~

~sp~
DROP FUNCTION   Users_Exists;
delimiter //
CREATE FUNCTION Users_Exists( $Email CHAR(99) )
RETURNS BOOLEAN
DETERMINISTIC
BEGIN

return Exists( SELECT email FROM users WHERE email=$Email );

END
//
delimiter ;
~

~sp~
DROP   PROCEDURE Users_Resend_Activation;
delimiter //
CREATE PROCEDURE Users_Resend_Activation
(
$email                     CHAR(99)
)
BEGIN

DECLARE $USER INT;

SELECT USER INTO $USER FROM users WHERE email=$email;

IF EXISTS( SELECT * FROM users_activations WHERE USER=$USER ) THEN

    UPDATE users SET sent=0 WHERE email=$email;

END IF;

END
//
delimiter ;
~

~sp~
DROP   PROCEDURE Users_Retrieve;
delimiter //
CREATE PROCEDURE Users_Retrieve
(
$Sid                           CHAR(64),
$USER                           INT(11)
)
BEGIN

CALL Users_Authorise_Sessionid( $Sid, @email, @USER, @idtype );

IF $USER = @USER THEN

    SELECT * FROM users WHERE USER=$USER;

END IF;

END
//
delimiter ;
~

~sp~
DROP   PROCEDURE Users_Retrieve_By_User_Hash;
DELIMITER //
CREATE PROCEDURE Users_Retrieve_By_User_Hash
(
  $sid                             CHAR(64),
  $user_hash                       CHAR(64)
)
BEGIN

CALL Users_Authorise_Sessionid( $Sid, @email, @USER, @idtype );

IF "" != @idtype THEN

    SELECT * FROM users WHERE user_hash=$user_hash;

END IF;

END
//
DELIMITER ;
~

~sp~
DROP   PROCEDURE Users_Retrieve_Unsent;
DELIMITER //
CREATE PROCEDURE Users_Retrieve_Unsent
()
BEGIN

SELECT * FROM view_users WHERE sent=0;

END
//
DELIMITER ;
~

~sp~
DROP   PROCEDURE Users_Update;
delimiter //
CREATE PROCEDURE Users_Update
(
$Sid                          CHAR(64),
$USER                          INT(11),
$new_email                    CHAR(99),
$new_given_name               CHAR(50),
$new_family_name              CHAR(50)
)
BEGIN

DECLARE $email             CHAR(99);
DECLARE $email_provisional CHAR(99);

CALL Users_Authorise_Sessionid( $Sid, @email, @USER, @idtype );

IF $USER = @USER OR "ADMIN" = @idtype THEN

    SELECT email             INTO $email             FROM users WHERE USER=$USER;
    SELECT email_provisional INTO $email_provisional FROM users WHERE USER=$USER;

    IF $new_email != @email THEN
        SET $email_provisional = $new_email;
    END IF;

    UPDATE users
    SET email_provisional=$email_provisional, given_name=$new_given_name, family_name=$new_family_name
    WHERE USER=$USER;

END IF;

END
//
delimiter ;
~

~sp~
DROP   PROCEDURE Users_Update_Sent;
DELIMITER //
CREATE PROCEDURE Users_Update_Sent
(
  $Email              CHAR(99)
)
BEGIN

UPDATE users SET sent=1 WHERE email=$Email OR email_provisional=$Email;

END
//
DELIMITER ;
~

~sp~
DROP   FUNCTION users_verify_credentials;
DELIMITER //
CREATE FUNCTION users_verify_credentials
(
  $Email              CHAR(99),
  $Password           CHAR(99)
)
RETURNS BOOL
READS SQL DATA
BEGIN

DECLARE $ret    BOOL;
DECLARE $salt   TEXT;
DECLARE $phash1 TEXT;
DECLARE $phash2 TEXT;

SET $ret = False;

IF EXISTS( SELECT * FROM users WHERE email=$Email ) THEN

    SELECT user_salt     INTO $salt   FROM users WHERE email=$Email;
    SELECT password_hash INTO $phash1 FROM users WHERE email=$Email;

    SET $phash2 = Users_Compute_Hash( $salt, $Password );

    IF $phash1 = $phash2 THEN
        SET $ret = True;
    END IF;

END IF;

return $ret;

END
//
DELIMITER ;
~



...			Table: requested invites

~tables~
DROP   TABLE users_requested_invites;
CREATE TABLE users_requested_invites
(
REQUEST                             INT(11)  AUTO_INCREMENT,
email                           VARCHAR(99)  NOT NULL DEFAULT '',
time_of_request                DATETIME,
invite_sent                     BOOLEAN,

PRIMARY KEY (REQUEST)
);
~

....			Stored Procedures

.....				Procedure: Users Requested Invites Replace

~sp~
DROP PROCEDURE   Users_Requested_Invites_Replace;
DELIMITER //
CREATE PROCEDURE Users_Requested_Invites_Replace
(
  $email                         CHAR(99)
)
BEGIN

IF NOT EXISTS( SELECT * FROM users_requested_invites WHERE email=$email ) THEN
    REPLACE INTO users_requested_invites
           (  REQUEST,  email, time_of_request, invite_sent )
    VALUES (        0, $email,           NOW(),           0 );
END IF;

END
//
DELIMITER ;
~

.....				Procedure: Users Requested Invites Retrieve

~sp~
DROP   PROCEDURE Users_Requested_Invites_Retrieve;
DELIMITER //
CREATE PROCEDURE Users_Requested_Invites_Retrieve
(
  $sid                           CHAR(64)
)
BEGIN

#CALL Users_Authorise_Sessionid( $Sid, @email, @USER, @idtype );

#IF "SID" = @idtype THEN
#    IF NOT EXISTS( SELECT * FROM users_requested_invites WHERE email=@email ) THEN
#        SELECT * FROM users_requested_invites ORDER BY time_of_request;
#    END IF;
#END IF;

END
//
DELIMITER ;
~


...         Table: users activations

~tables~
DROP   TABLE users_activations;
CREATE TABLE users_activations (

USER                                INT(11)  NOT NULL,
timestamp                     TIMESTAMP      NOT NULL,
token                           VARCHAR(64)  NOT NULL,

PRIMARY KEY (USER)
);
~

....                Stored Procedures

.....                   Users Activations Create

~sp~
DROP   PROCEDURE Users_Activations_Create;
DELIMITER //
CREATE PROCEDURE Users_Activations_Create
(
  $email                           CHAR(99)
)
BEGIN

DECLARE $USER  INT;
DECLARE $token TEXT;

SET $token = generate_salt();

SELECT USER INTO $USER FROM users WHERE email=$email OR email_provisional=$email;

IF "" != $USER THEN
  REPLACE INTO users_activations VALUES ( $USER, NOW(), $token );
END IF;

SELECT $token AS token;

END
//
DELIMITER ;
~

~sp~
DROP   PROCEDURE Users_Activations_Confirm_Account;
DELIMITER //
CREATE PROCEDURE Users_Activations_Confirm_Account
(
  $token                           CHAR(64)
)
BEGIN

DECLARE $USER              INT;
DECLARE $email             TEXT;
DECLARE $email_provisional TEXT;

SELECT USER INTO $USER FROM users_activations WHERE token=$token;

IF 0 != $USER THEN
  SELECT email, email_provisional INTO $email, $email_provisional
  FROM users WHERE USER=$USER;
	
  IF "" != $email_provisional THEN
    SET $email = $email_provisional;
  END IF;

  UPDATE users SET email=$email, email_provisional='', user_status='CONFIRMED' WHERE USER=$USER;
  DELETE FROM users_activations WHERE token=$token;
END IF;

END
//
DELIMITER ;
~

~sp~
DROP   PROCEDURE Users_Activations_Confirm_Account_And_Authenticate;
DELIMITER //
CREATE PROCEDURE Users_Activations_Confirm_Account_And_Authenticate
(
  $token                           CHAR(64)
)
BEGIN

DECLARE $USER              INT;
DECLARE $email             TEXT;
DECLARE $email_provisional TEXT;
DECLARE $sessionid         TEXT;

SELECT USER INTO $USER FROM users_activations WHERE token=$token;

SET $sessionid = "";

IF 0 != $USER THEN
    SELECT email, email_provisional INTO $email, $email_provisional
    FROM users WHERE USER=$USER;
	
    IF "" != $email_provisional THEN
        SET $email = $email_provisional;
    END IF;

    UPDATE users SET email=$email, email_provisional='', user_status='CONFIRMED' WHERE USER=$USER;
    DELETE FROM users_activations WHERE token=$token;

    SET $sessionid = MD5( concat( $token, NOW() ) );
    REPLACE INTO users_sessions VALUES ( $sessionid, $email, NOW(), NOW(), UNIX_TIMESTAMP() + 1000 );
END IF;

SELECT $sessionid AS sessionid;

END
//
DELIMITER ;
~




...			Table: users reset passwords

~tables~
DROP   TABLE users_send_resets;
CREATE TABLE users_send_resets
(
USER                                INT(11)  NOT NULL,
timestamp                     TIMESTAMP      NOT NULL,
token                           VARCHAR(64)  NOT NULL,
sent                          TIMESTAMP      NOT NULL,

PRIMARY KEY (USER)
);
~

....			Stored Procedures

.....				Users Reset Passwords

~sp~
DROP   PROCEDURE Users_Send_Resets_Replace;
DELIMITER //
CREATE PROCEDURE Users_Send_Resets_Replace
(
  $email      CHAR(99)
)
BEGIN

DECLARE $USER  INT;
DECLARE $token TEXT;

SET $token = generate_seed();

SELECT USER INTO $USER FROM users WHERE email=$email;

IF "" != $USER THEN
  REPLACE INTO users_send_resets VALUES ( $USER, NOW(), $token, 0 );
END IF;

END
//
DELIMITER ;
~

~sp~
DROP   PROCEDURE Users_Send_Resets_Retrieve;
DELIMITER //
CREATE PROCEDURE Users_Send_Resets_Retrieve
()
BEGIN

SELECT * FROM users_send_resets LEFT JOIN users USING (USER) WHERE users_send_resets.sent=0;

END
//
DELIMITER ;
~

~sp~
DROP   PROCEDURE Users_Send_Resets_Sent;
DELIMITER //
CREATE PROCEDURE Users_Send_Resets_Sent
(
  $email  CHAR(99)
)
BEGIN

DECLARE $USER INT;

SELECT USER INTO $USER FROM users_send_resets LEFT JOIN users USING (USER) WHERE email=$email LIMIT 1;

UPDATE users_send_resets SET sent=NOW() WHERE USER=$USER;

END
//
DELIMITER ;
~


~sp~
DROP   PROCEDURE Users_Send_Resets_Reset_Password;
DELIMITER //
CREATE PROCEDURE Users_Send_Resets_Reset_Password
(
  $token                           CHAR(64),
  $password                        CHAR(99)
)
BEGIN

DECLARE $USER  INT;
DECLARE $email TEXT;
DECLARE $salt  TEXT;
DECLARE $uhash TEXT;
DECLARE $phash TEXT;

SELECT USER INTO $USER FROM users_send_resets WHERE token=$token;

IF 0 != $USER THEN
    SELECT email INTO $email FROM users WHERE USER=$USER;

    SET $salt  = generate_salt();
    SET $uhash = Users_Compute_Hash( $salt, @email );
    SET $phash = Users_Compute_Hash( $salt, $Password );

    UPDATE users
    SET user_salt=$salt, user_hash=$uhash, password_hash=$phash, invalid_logins=0
    WHERE USER=$USER;

    DELETE FROM users_send_resets WHERE token=$token;
END IF;

END
//
DELIMITER ;
~

~sp~
DROP   FUNCTION Users_Send_Resets_Exists;
DELIMITER //
CREATE FUNCTION Users_Send_Resets_Exists
(
  $token      CHAR(64)
)
RETURNS BOOL
READS SQL DATA
BEGIN

return EXISTS( SELECT * FROM users_send_resets WHERE token=$token );

END
//
DELIMITER ;
~

...         Table: users sessions

~tables~
DROP   TABLE users_sessions;
CREATE TABLE users_sessions
(
sid                             VARCHAR(64)  NOT NULL,
email                           VARCHAR(99)  NOT NULL,
created                       TIMESTAMP      NOT NULL,
updated                       TIMESTAMP      NOT NULL,
expiry                              INT(64)  NOT NULL,

PRIMARY KEY (sid)
);
~

....            Stored Procedures

~
Users_Sessions_Replace( $Email, $Password );
Users_Sessions_Terminate( $Sid );
Users_Sessions_Authorise
Users_Session_Verify


~

.....               Users Sessions Replace

~sp~
DROP   PROCEDURE Users_Sessions_Replace;
DELIMITER //
CREATE PROCEDURE Users_Sessions_Replace
(
  $email                           CHAR(99),
  $password                        CHAR(99)
)
BEGIN

DECLARE $salt      TEXT;
DECLARE $phash1    TEXT;
DECLARE $phash2    TEXT;
DECLARE $invalid   TEXT;
DECLARE $sessionid TEXT;

DELETE FROM users_sessions WHERE expiry < UNIX_TIMESTAMP();

SELECT user_salt      INTO $salt    FROM users WHERE email=$email;
SELECT password_hash  INTO $phash1  FROM users WHERE email=$email;
SELECT invalid_logins INTO $invalid FROM users WHERE email=$email;

IF "" != $email THEN

  IF $invalid > 4 THEN

     SELECT SLEEP( $invalid );

     SET $sessionid = "INVALID_LOGINS";

  ELSE

    SET $phash2 = Users_Compute_Hash( $salt, $password );

    IF $phash1=$phash2 THEN

      SET $sessionid = generate_salt();

      WHILE EXISTS( SELECT * FROM users_sessions WHERE sid=$sessionid ) DO
        SET $sessionid = generate_salt();
	  END WHILE;
	  
      REPLACE INTO users_sessions VALUES ( $sessionid, $email, NOW(), NOW(), UNIX_TIMESTAMP() + 1000 );
      UPDATE users SET invalid_logins = 0, last_login=NOW() WHERE email=$email;

    ELSE

      UPDATE users SET invalid_logins = $invalid + 1 WHERE email=$Email;
      SET $sessionid = "INVALID_PASSWORD";

    END IF;
  END IF;
ELSE

  SET $sessionid = "INVALID_USER";

END IF;

SELECT $sessionid AS sessionid;

END
//
DELIMITER ;
~

~
DROP   FUNCTION Users_Sessions_Terminate;
DELIMITER //
CREATE FUNCTION Users_Sessions_Terminate
(
  $Sid                             CHAR(64)
)
RETURNS BOOLEAN
BEGIN

DELETE FROM users_sessions WHERE sid=$Sid;
DELETE FROM users_sessions WHERE expiry < NOW();

return True;

END
//
DELIMITER ;
~

~sp~
DROP   PROCEDURE Users_Sessions_Terminate;
DELIMITER //
CREATE PROCEDURE Users_Sessions_Terminate
(
  $Sid                             CHAR(64)
)
BEGIN

DELETE FROM users_sessions WHERE sid=$Sid;

END
//
DELIMITER ;
~


.....               Users Sessions Verify

~sp~
DROP   FUNCTION Users_Sessions_Verify;
DELIMITER //
CREATE FUNCTION Users_Sessions_Verify
(
  $Sid CHAR(64)
)
RETURNS BOOLEAN
READS SQL DATA
BEGIN

DECLARE $expiry INT;
DECLARE $now    INT;
DECLARE $ret    BOOL;

SET $now    = UNIX_TIMESTAMP();
SET $ret    = False;

SELECT expiry INTO $expiry FROM users_sessions WHERE sid=$Sid;

IF $now < $expiry THEN
    SET $ret = True;
END IF;

return $ret;

END
//
DELIMITER ;
~

~sp~
DROP   PROCEDURE Users_Sessions_Extend_Expiry;
DELIMITER //
CREATE PROCEDURE Users_Sessions_Extend_Expiry
(
  $Sid CHAR(64)
)
BEGIN

DECLARE $expiry INT;
DECLARE $now    INT;
DECLARE $ret    BOOL;

SET $now = UNIX_TIMESTAMP();

SELECT expiry INTO $expiry FROM users_sessions WHERE sid=$Sid;

IF $now < $expiry THEN
    SET $expiry = $expiry + 1000;
    UPDATE users_sessions SET expiry=$expiry WHERE sid=$Sid;
ELSE
    UPDATE users_sessions SET expiry=0       WHERE sid=$Sid;
END IF;

END
//
DELIMITER ;
~


.....               Users Sessions Authorise

~sp~
DROP   PROCEDURE Users_Authorise_Sessionid;
DELIMITER //
CREATE PROCEDURE Users_Authorise_Sessionid
(
      $Sid          CHAR(64),
  OUT $Email        CHAR(99),
  OUT $USER          INT(11),
  OUT $IDType    VARCHAR(20)
)
BEGIN

IF Users_Sessions_Verify( $Sid ) THEN

    CALL Users_Sessions_Extend_Expiry( $Sid );

    SELECT email    INTO $Email    FROM users_sessions WHERE sid      = $Sid;
    SELECT USER     INTO $USER     FROM users          WHERE email    = $Email;
    SELECT type     INTO $IDType   FROM users_uids     WHERE USER     = $USER;

ELSE

    CALL Users_Sessions_Terminate( $Sid );

END IF;

END
//
DELIMITER ;
~

~sp~
DROP   PROCEDURE Users_Authorize_Sessionid;
DELIMITER //
CREATE PROCEDURE Users_Authorize_Sessionid
(
      $Sid          CHAR(64),
  OUT $Email        CHAR(99),
  OUT $USER          INT(11),
  OUT $IDType    VARCHAR(20)
)
BEGIN

CALL Users_Authorise_Sessionid( $Sid, $Email, $USER, $IDType );

END
//
DELIMITER ;
~


.....               Users Authenticate


~sp~
DROP   PROCEDURE Users_Authenticate;
DELIMITER //
CREATE PROCEDURE Users_Authenticate
(
  $Sid CHAR(64)
)
BEGIN

IF Users_Sessions_Verify( $Sid ) THEN

  CALL Users_Sessions_Extend_Expiry( $Sid );

  SELECT email, USER, given_name, family_name, type AS idtype, last_login, user_status, user_hash
  FROM users_sessions
  LEFT JOIN view_users USING (email) WHERE sid=$Sid;

ELSE

  CALL Users_Sessions_Terminate( $Sid );

END IF;

END
//
DELIMITER ;
~


...         Table: users (session reliant)

....            Stored Procedures

.....				Users Retrieve Single

~sp~
DROP   PROCEDURE Users_Retrieve_Single;
delimiter //
CREATE PROCEDURE Users_Retrieve_Single
(
  $Sid                       CHAR(64),
  $USER                       INT(11)
)
BEGIN

CALL Users_Authorise_Sessionid( $Sid, @email, @USER, @idtype );

IF @USER = $USER THEN

  SELECT * FROM users WHERE USER=$USER LIMIT 1;

END IF;

END
//
delimiter ;
~

.....				Users Update name

~sp~
DROP   PROCEDURE Users_Update_Name;
delimiter //
CREATE PROCEDURE Users_Update_Name
(
  $Sid                       CHAR(64),
  $USER                       INT(11),
  $given_name                CHAR(50),
  $family_name               CHAR(50)
)
BEGIN

CALL Users_Authorise_Sessionid( $Sid, @email, @USER, @idtype );

IF @USER = $USER THEN

  UPDATE users SET given_name=$given_name, family_name=$family_name WHERE USER=$USER;

END IF;

END
//
delimiter ;
~

~sp~
DROP   PROCEDURE Users_Retrieve_Signups;
delimiter //
CREATE PROCEDURE Users_Retrieve_Signups
(
$days INT(11)
)
BEGIN

SELECT email, sent, user_status, given_name, family_name, user_hash FROM users WHERE created > DATE_SUB( NOW(), INTERVAL $days DAY );

END
//
delimiter ;
~






...         Table: alternate emails

~tables~
DROP   TABLE users_alternate_emails;
CREATE TABLE users_alternate_emails (

USER                            INT(11)  NOT NULL AUTO_INCREMENT,
email                       VARCHAR(99)  NOT NULL DEFAULT '',
token                       VARCHAR(64)  NOT NULL,

PRIMARY KEY (USER,email)
);
~

....            Stored Procedures

.....               Users Alternate Emails Create

~sp~
DROP   PROCEDURE Users_Alternate_Emails_Create;
delimiter //
CREATE PROCEDURE Users_Alternate_Emails_Create
(
  $Sid                       CHAR(64),
  $USER                       INT(11),
  $email                  VARCHAR(99)
)
BEGIN

CALL Users_Authorise_Sessionid( $Sid, @email, @USER, @idtype );

IF @USER = $USER THEN

  REPLACE INTO users_alternate_emails VALUES ( $USER, $email, generate_salt() );

END IF;

END
//
delimiter ;
~


.....                   Users Alternate Emails Delete

~sp~
DROP   PROCEDURE Users_Alternate_Emails_Delete;
delimiter //
CREATE PROCEDURE Users_Alternate_Emails_Delete
(
  $Sid                       CHAR(64),
  $USER                       INT(11),
  $Email                  VARCHAR(99)
)
BEGIN

CALL Users_Authorise_Sessionid( $Sid, @email, @USER, @idtype );

IF @USER = $USER THEN
    DELETE FROM users_alternate_emails WHERE USER=$USER AND email=$Email;
END IF;

END
//
delimiter ;
~


.....                   Users

~sp~
DROP   PROCEDURE Users_Alternate_Emails_Retrieve_By_USER;
delimiter //
CREATE PROCEDURE Users_Alternate_Emails_Retrieve_By_USER
(
  $Sid                       CHAR(64),
  $USER                       INT(11)
)
BEGIN

CALL Users_Authorise_Sessionid( $Sid, @email, @USER, @idtype );

IF @USER = $USER THEN
    SELECT * FROM users_alternate_emails WHERE USER=$USER ORDER BY email;
END IF;

END
//
delimiter ;
~

...			Table: Users_Termination_Schedule

~tables~
DROP   TABLE users_termination_schedule;
CREATE TABLE users_termination_schedule
(

USER                            INT(11)  NOT NULL,
mark                       DATETIME      NOT NULL,
time_of_termination        DATETIME      NOT NULL,

PRIMARY KEY (USER)
);
~

....			Stored Procedures

o	Users_Termination_Schedule_Replace

~sp~
DROP   PROCEDURE Users_Termination_Schedule_Replace;
delimiter //
CREATE PROCEDURE Users_Termination_Schedule_Replace
(
  $Sid                        CHAR(64),
  $USER                        INT(11),
  $password                   CHAR(99)
)
BEGIN

SET @success = 0;

CALL Users_Authorise_Sessionid( $Sid, @email, @USER, @idtype );

IF @USER = $USER THEN
    IF ( users_verify_credentials( @email, $password ) ) THEN
        REPLACE INTO users_termination_schedule
            ( USER,  mark,  time_of_termination )
        VALUES
            ( $USER, NOW(), date_add( NOW(), INTERVAL 1 DAY ) );
        SET @success = 1;

    END IF;
END IF;

SELECT @success AS success;

END
//
delimiter ;
~

~sp~
DROP   PROCEDURE Users_Termination_Schedule_Retrieve;
delimiter //
CREATE PROCEDURE Users_Termination_Schedule_Retrieve
()
BEGIN

SELECT USER, time_of_termination, email
FROM users_termination_schedule LEFT JOIN users USING (USER)
WHERE NOW() > time_of_termination;

END
//
delimiter ;
~


...			Table: users deleted

~tables~
DROP   TABLE users_deleted;
CREATE TABLE users_deleted
(
USER         INT(11),
DELETED_USER INT(11)
);
~

~sp~
DROP   PROCEDURE Users_Delete;
delimiter //
CREATE PROCEDURE Users_Delete
(
  $Sid  CHAR(64),
  $USER INT(11)
)
BEGIN

DECLARE $email TEXT;

IF "" != $Sid THEN
  CALL Users_Authorise_Sessionid( $Sid, @email, @USER, @idtype );
  INSERT INTO users_deleted VALUES ( @USER, $USER );
END IF;

SELECT email INTO $email FROM users WHERE USER=$USER;

DELETE FROM users_activations          WHERE USER=$USER;
DELETE FROM users_alternate_emails     WHERE USER=$USER;
DELETE FROM users_send_resets          WHERE USER=$USER;
DELETE FROM users_sessions             WHERE email=$email;
DELETE FROM users_uids                 WHERE USER=$USER;
DELETE FROM users_termination_schedule WHERE USER=$USER;
DELETE FROM users                      WHERE USER=$USER;

END
//
delimiter ;
~





