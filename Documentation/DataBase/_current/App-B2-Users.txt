..		Module: Users

...			Table: UIDS

~tables~
DROP   TABLE users_uids;
CREATE TABLE users_uids (

USER                            INT(11)  NOT NULL AUTO_INCREMENT,
type                        VARCHAR(20)  NOT NULL DEFAULT '',

PRIMARY KEY (USER)
);
~

....			Stored Procedures

.....				users uid create

~sp_users~
DROP   PROCEDURE users_uid_create;
delimiter //
CREATE PROCEDURE users_uid_create( $Type VARCHAR(20) )
BEGIN

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

	INSERT INTO users_uids (type) VALUES ( $Type );
	SELECT LAST_INSERT_ID() AS USER;

END IF;

END
//
delimiter ;
~

...			Table: Users

~tables~
DROP   TABLE users;
CREATE TABLE users (

USER                            INT(11)  NOT NULL,
email                       VARCHAR(99)  NOT NULL,
email_provisional           VARCHAR(99)  NOT NULL DEFAULT '',
created                    DATETIME      NOT NULL,
last_login                 DATETIME      NOT NULL DEFAULT 0,
invalid_logins                  INT(11)  NOT NULL DEFAULT 0,

user_salt                   VARCHAR(64)  NOT NULL,
user_hash                   VARCHAR(64)  NOT NULL,
password_hash               VARCHAR(64)  NOT NULL,
user_status                 VARCHAR(20)  NOT NULL,
send_confirmation              BOOL      NOT NULL DEFAULT 0,
sent                           BOOL      NOT NULL DEFAULT 0,
confirmation_sent              DATETIME  NOT NULL DEFAULT 0,
confirmed                      DATETIME  NOT NULL DEFAULT 0,

given_name                  VARCHAR(50)  NOT NULL,
family_name                 VARCHAR(50)  NOT NULL,

visits                          INT(11)  NOT NULL DEFAULT 1,

PRIMARY KEY (email), UNIQUE KEY (USER)
);
~

~views~
DROP   VIEW view_users;
CREATE VIEW view_users AS
  SELECT * FROM users LEFT JOIN users_uids USING (USER);
~

~views~
DROP   VIEW view_users_summaries;
CREATE VIEW view_users_summaries AS
  SELECT
   USER,
   given_name,
   family_name,
   email,
   type
  FROM view_users ORDER BY USER;
~

....			Stored Procedures

o	Users_Create
o	Users_Create_Quietly
o	Users_Activation_Sent
o	Users_Compute_Hash
o	Users_Change_Password
o	Users_Check_Password
o	Users_Exists
o	Users_Resent_Activation
o	Users_Retrieve
o	Users_Retrieve_By_User_Hash
o	Users_Retrieve_Unsent
o	Users_Update
o	Users_Update_Sent
o	Users_Verify_Credentials



~sp_users~
DROP   PROCEDURE users_create;
delimiter //
CREATE PROCEDURE users_create
(
$Email                     CHAR(99),
$Password                  CHAR(99),
$Given_name                CHAR(50),
$Family_name               CHAR(50),
$Type                      CHAR(20)
)
BEGIN

DECLARE $USER   INT;
DECLARE $salt   TEXT;
DECLARE $uhash  TEXT;
DECLARE $phash  TEXT;
DECLARE $status TEXT;

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

	IF ! Users_Exists( $Email ) THEN

        INSERT INTO users_uids (type) VALUES ( $Type );

        SET $USER  = LAST_INSERT_ID();
        SET $salt  = generate_salt();
        SET $uhash = Users_Compute_Hash( $salt, $Email    );
        SET $phash = Users_Compute_Hash( $salt, $Password );

        INSERT INTO users
            (  USER,  email, created,  user_salt, user_hash, password_hash, send_confirmation,   user_status,  given_name,  family_name )
        VALUES
            ( $USER, $Email,   NOW(),      $salt,    $uhash,        $phash,                 1, "UNCONFIRMED", $Given_name, $Family_name );

        IF Users_Exists( $Email ) THEN

            SELECT "OK" AS status, $USER AS USER;

        ELSE

            SELECT "ERROR" AS status, "UNEXPECTED_ERROR" AS message;

        END IF;

	ELSE

        SELECT "ERROR" AS status, "USER_EXISTS" AS message;

	END IF;

END IF;

END
//
delimiter ;
~

~sp_users~
DROP   PROCEDURE Users_Retrieve;
delimiter //
CREATE PROCEDURE Users_Retrieve
(
$Sid                           CHAR(64),
$USER                           INT(11)
)
BEGIN

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

	CALL Users_Authorise_Sessionid( $Sid, @email, @USER, @idtype );

	IF $USER = @USER THEN

		SELECT * FROM users WHERE USER=$USER;

	END IF;

END IF;

END
//
delimiter ;
~

~sp_users~
DROP   PROCEDURE Users_Update;
delimiter //
CREATE PROCEDURE Users_Update
(
$Sid                          CHAR(64),
$USER                          INT(11),
$new_email                    CHAR(99),
$new_given_name               CHAR(50),
$new_family_name              CHAR(50)
)
BEGIN

DECLARE $email             CHAR(99);
DECLARE $email_provisional CHAR(99);

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

	CALL Users_Authorise_Sessionid( $Sid, @email, @USER, @idtype );

	IF $USER = @USER OR "ADMIN" = @idtype THEN

		SELECT email             INTO $email             FROM users WHERE USER=$USER;
		SELECT email_provisional INTO $email_provisional FROM users WHERE USER=$USER;

		IF $new_email != @email THEN
			SET $email_provisional = $new_email;
		END IF;

		UPDATE users
		SET email_provisional=$email_provisional, given_name=$new_given_name, family_name=$new_family_name
		WHERE USER=$USER;

	END IF;

END IF;

END
//
delimiter ;
~

~sp_users~
DROP   FUNCTION users_verify_credentials;
DELIMITER //
CREATE FUNCTION users_verify_credentials
(
  $Email              CHAR(99),
  $Password           CHAR(99)
)
RETURNS BOOL
READS SQL DATA
BEGIN

DECLARE $ret    BOOL;
DECLARE $salt   TEXT;
DECLARE $phash1 TEXT;
DECLARE $phash2 TEXT;

SET $ret = False;

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

	IF EXISTS( SELECT * FROM users WHERE email=$Email ) THEN

		SELECT user_salt     INTO $salt   FROM users WHERE email=$Email;
		SELECT password_hash INTO $phash1 FROM users WHERE email=$Email;

		SET $phash2 = Users_Compute_Hash( $salt, $Password );

		IF $phash1 = $phash2 THEN
			SET $ret = True;
		END IF;

	END IF;

END IF;

return $ret;

END
//
DELIMITER ;
~

~sp_users~
DROP   FUNCTION Users_Check_Password;
DELIMITER //
CREATE FUNCTION Users_Check_Password
(
  $USER                             INT(11),
  $Password                        CHAR(99)
)
RETURNS BOOLEAN
READS SQL DATA
BEGIN

DECLARE $valid BOOLEAN DEFAULT FALSE;
DECLARE $email TEXT;

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

	SELECT email INTO $email FROM users WHERE USER=$USER;

	SET $valid = users_verify_credentials( $email, $Password );

END IF;

return $valid;

END
//
DELIMITER ;
~

~sp_users~
DROP   PROCEDURE users_change_password;
DELIMITER //
CREATE PROCEDURE users_change_password
(
  $Email       CHAR(99),
  $OldPassword CHAR(99),
  $NewPassword CHAR(99)
)
BEGIN

DECLARE ret   BOOL;
DECLARE salt  TEXT;
DECLARE uhash TEXT;
DECLARE phash TEXT;

SET ret = False;

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

	IF users_verify_credentials( $Email, $OldPassword ) THEN

		SET salt  = generate_salt();
		SET uhash = Users_Compute_Hash( salt, $Email    );
		SET phash = Users_Compute_Hash( salt, $NewPassword );

		UPDATE users
		SET user_salt=salt, user_hash=uhash, password_hash=phash
		WHERE email=$Email;

		SET ret = True;

	END IF;

	SELECT ret AS success;

END IF;

END
//
DELIMITER ;
~

.....               Users Sessions Authorise

~sp_users~
DROP   PROCEDURE users_authorise_sessionid;
DELIMITER //
CREATE PROCEDURE users_authorise_sessionid
(
      $Sid          CHAR(64),
  OUT $Email        CHAR(99),
  OUT $USER          INT(11),
  OUT $IDType    VARCHAR(20)
)
BEGIN

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

	IF Users_Sessions_Verify( $Sid ) THEN

		CALL Users_Sessions_Extend_Expiry( $Sid );

		SELECT email    INTO $Email    FROM users_sessions WHERE sid      = $Sid;
		SELECT USER     INTO $USER     FROM users          WHERE email    = $Email;
		SELECT type     INTO $IDType   FROM users_uids     WHERE USER     = $USER;

	ELSE

		CALL Users_Sessions_Terminate( $Sid );

	END IF;

END IF;

END
//
DELIMITER ;
~

~sp_users~
DROP   PROCEDURE users_authorize_sessionid;
DELIMITER //
CREATE PROCEDURE users_authorize_sessionid
(
      $Sid          CHAR(64),
  OUT $Email        CHAR(99),
  OUT $USER          INT(11),
  OUT $IDType    VARCHAR(20)
)
BEGIN

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

    CALL Users_Authorise_Sessionid( $Sid, $Email, $USER, $IDType );

END IF;

END
//
DELIMITER ;
~



.....               Users Authenticate


~sp_users~
DROP   PROCEDURE Users_Authenticate;
DELIMITER //
CREATE PROCEDURE Users_Authenticate
(
  $Sid CHAR(64)
)
BEGIN

DECLARE $read_only BOOL;

IF @@read_only THEN

    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'READ_ONLY';

ELSE

	IF Users_Sessions_Verify( $Sid ) THEN

	  CALL Users_Sessions_Extend_Expiry( $Sid );

	  SELECT email, USER, given_name, family_name, type AS idtype, last_login, user_status, user_hash, $read_only AS read_only
	  FROM users_sessions
	  LEFT JOIN view_users USING (email) WHERE sid=$Sid;

	ELSE

	  CALL Users_Sessions_Terminate( $Sid );

	END IF;

END IF;

END
//
DELIMITER ;
~




